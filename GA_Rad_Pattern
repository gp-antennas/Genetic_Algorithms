#include <stdio.h>
//#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

int main()
{
    /** READ DATA FROM FILE **/
    //Read file into array
    char buffer[1000]; char *word, *line; float val;    //Variable for extracting da
    //Read file into array
    //char filename1[1000]={"C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\gainSphHarmCoeff.txt"};
    //char filename2[1000]={"C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\gainPolyCoeff.txt"};
    int k; int child_no=5; int parent_no=2;
    int out_cnt=3; int tour_cnt=2;
    int array_size=2; int array_size2=2220;
    float input[array_size][array_size2][parent_no]={{0}};
    float constant[3][array_size2][parent_no]={{0}};
    for (k=0;k<parent_no;k++)
    {
        //array_size2=0;  //Will hold parameters for each frequency
        char filename_name[200];
        //sprintf(filename_name,"C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\INPUT%d.txt",i+1);
        sprintf(filename_name,"C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\discone_gain_data.csv");
        //printf("%s\n\n",filename_name);
        FILE *fptr=fopen(filename_name,"r");    //Begin taking data from input file
        int j=-1;
    while((line=fgets(buffer,sizeof(buffer),fptr)) != NULL)   //Runs down lines
       {
        int i=0;
        word = strtok(line,",");    //Separate lines into words
        //printf("%s\n",word);
        while(word != NULL && j>=0)
        {
            //word = strtok(word,",");
            //
            //printf("%s\n",word);
            val=strtof(word,NULL);  //Grabs word as a floating-point value
            if (i<3)
            {
                constant[i][j][k]=val;   //Fills array of currently unknown size
            }
            else
            {
                input[i-3][j][k]=val;
            }
            //printf("%E\t",constant[i][j][k]);
            i++;
            word = strtok(NULL,",");
        }
        j++;
       }
    fclose(fptr);   //Stop taking data from input file
    }
    /** PUT DATA INTO ARRAY **/
       /*float input[array_size][array_size2][parent_no]; //Create array of known size
       int n;
       for (n=0;n<parent_no;n++)
       {
           for (i=0;i<array_size;i++)
           {
               int j;
               for (j=0;j<array_size2;j++)
               {
                   input[i][j][n]=constant[i][j][n];
               }
           }
       }*/

    float sum_val = 0;
    //float f_max_val = 100.0;

   /** CALCULATE MINIMUM AND MAXIMUM VALUES **/
   int t; int u; float min_val=0.0f; /*float max_val=0.0f;
   for (n=0;n<parent_no;n++)
   {
       for (t=0;t<array_size;t++)
       {
           for (u=0;u<array_size2;u++)
           {
               //min_val=fabs(input[t]);
               if (input[t][u][n]<-min_val)
               {
                   min_val=fabs(input[t][u][n]);
               }
               if (input[t][u][n]>min_val)
               {
                   max_val=fabs(input[t][u][n]);
               }
           }
       }
    }*/

   for (t=0;t<array_size;t++)
   {
       //input[t]+=min_val;
       for (u=0;u<array_size2;u++)
       {
           //input[t][u]+=min_val;
           sum_val+=fabs(input[t][u][0]);
       }
   }

   /** CREATE OUTPUT ARRAYS **/
   //Output Array
   float output[array_size][array_size2][child_no];
   //float output_array[array_size][array_size2];
   //int winner=0; int winner2=0; int check;

   //Roulette Array
   float roulette[array_size][array_size2][child_no];
   float roulette_winner[array_size][array_size2]; float roulette_score=0.0f; float roulette_percentage=0.0f; int roulette_pool;
   float best_roulette_winner[array_size][array_size2];
   float roulette_error_percent=10000.0f;
   float roulette_max_variance=0.0f;
   float fit_hold[child_no*100*array_size]={0.0f}; int fitness_length;

   //Tournament array
   float tour[array_size][array_size2][child_no];
   float tour_best[array_size][array_size2];
   float tour_score[child_no]={0};
   float tour_error_value=10000.0f;
   float tour_error_percent=10000.0f;
   float tour_hold[array_size][array_size2];

    srand (time(NULL));

    /** ELITE TEST **/
//    int k;
        for (k=0;k<out_cnt;k++) //Each individual in the population
        {
            int i;
            for(i=0;i<array_size;i++) //Each "allele" of the individual
            {
                int j;
                for(j=0;j<array_size2;j++)
                {
                    output[i][j][k]=input[i][j][rand()%parent_no];  //Randomly pick one parent from whom to steal an "allele"
                    //printf("%E\t",output[i][j][k]);
                }
            }
        }

        /*float val_mat[child_no][child_no]={{0.0}};
        float val_mat_min=10000.0;
        int min_x[3]={0}; int min_y[3]={0};
        for (i=0;i<child_no;i++)
        {
            int j;
            for (j=0;j<child_no;j++)
            {
                int k;
                for (k=0;k<array_size;k++)
                {
                    int l;
                    for (l=0;l<array_size2;l++)
                    {
                        val_mat[i][j]+=fabs(input[k][l][i]-(output[k][l][i]+output[k][l][j])/2);
                    }
                }
                if (val_mat[i][j]<val_mat_min)
                {
                    min_x[2]=min_x[1]; min_y[2]=min_y[1];
                    min_x[1]=min_x[0]; min_y[1]=min_y[0];
                    min_x[0]=i; min_y[0]=j;
                    val_mat_min=val_mat[i][j];
                }
            }
        }*/

        /*int j=0;
            for (i=0;i<round(child_no/2);i++)
            {
                for (j=0;j<array_size;j++)
                {
                    //output[j][i]=best_choice[j];
                    for (k=0;k<array_size2;k++)
                    {
                        //output[j][k][i]=(output[j][k][min_x[0]]+output[j][k][min_y[0]])/2;
                        output[j][k][i]=(float)rand()/(float)(RAND_MAX/sum_val);
                    }
                }
            }
            for (i=round(child_no/2)+1;i<round(3*child_no/4);i++)
            {
                for (j=0;j<array_size;j++)
                {
                    //output[j][i]=output[j][winner];
                    for (k=0;k<array_size2;k++)
                    {
                        //output[j][k][i]=(output[j][k][min_x[1]]+output[j][k][min_y[1]])/2;
                        output[j][k][i]=(float)rand()/(float)(RAND_MAX/sum_val);
                    }
                }
            }
            for (i=round(3*child_no/4)+1;i<child_no;i++)
            {
                for (j=0;j<array_size;j++)
                {
                    //output[j][i]=output[j][winner2];
                    for (k=0;k<array_size2;k++)
                    {
                        //output[j][k][i]=(output[j][k][min_x[2]]+output[j][k][min_y[2]])/2;
                        output[j][k][i]=(float)rand()/(float)(RAND_MAX/sum_val);
                    }
                }
            }*/
   //Ranking
   /** ROULETTE WHEEL **/
        roulette_pool=child_no;
        //fitness_length=0; roulette_score=0.0;
        int i;
        for (k=out_cnt;k<child_no;k++)
        {
            int j=0;
            for(j=0;j<array_size2;j++) //Each "allele" of the individual
            {
                for (i=0;i<array_size;i++) //Each individual in the population
                {
                    //if (i==j)
                    //{
                        //roulette[j][i]=float(rand()%int(sum_val));
                        output[i][j][k]=(float)rand()/(float)(RAND_MAX/sum_val);
                    //}
                }
            }
        }

            /*check=rand()%(fitness_length-1);
            winner=fit_hold[check];
            int j;
            for (j=0;j<array_size;j++)
            {
                roulette_winner[j]=roulette[j][winner];
                roulette_score+=fabs(input[j]-roulette_winner[j]);
            }
            roulette_percentage=100*roulette_score/sum_val;
        roulette_pool=1;
        if (roulette_pool==1)
        {
            for (i=0;i<child_no;i++)
            {
                int j;
                for (j=0;j<array_size;j++)
                {
                    roulette[j][i]=roulette[j][winner];
                }
            }
            break;
        }

        if (roulette_percentage<roulette_error_percent)
        {
            roulette_max_variance=0.0f;
            int j;
            for (j=0;j<array_size;j++)
            {
                best_roulette_winner[j]=roulette_winner[j];
                    if (100*fabs(input[j]-roulette_winner[j])/sum_val>roulette_max_variance)
                    {
                        roulette_max_variance=100*fabs(input[j]-roulette_winner[j])/sum_val;
                    }
            }
            roulette_error_percent=roulette_percentage;*/

    /** TOURNAMENT **/
    //for (n=0;n<max_gen;n++)
    for (k=0;k<child_no;k++)
    {
        int j;
        for (j=0;j<array_size2;j++)
        {
            for (i=0;i<array_size;i++)
            {
                tour[i][j][k]=0;
            }
        }
    }
/*        int k=rand()%(array_size);
        //int k=3;
        tour_error_value=sum_val*array_size;
        int j=rand()%array_size;
        for (i=0;i<child_no;i++)
        {
            int k_found=0;
            //while(k_found != k)
            while(k_found<array_size)
            {
                j=j+k;
                if (j>=array_size)
                {
                    j=j-array_size;
                }
                tour_score[i]+=fabs(tour[j][i]-input[j]);
                tour_hold[k_found]=tour[j][i];
                k_found++;
            }
            if (tour_score[i]<tour_error_value)
            {
                k_found=0; j=0;
                for (j=0;j<array_size;j++)
                {
                    tour_best[j]=tour_hold[j];
                }
                tour_error_value=tour_score[i];
            }
        }
        for (i=0;i<child_no;i++)
        {
            for (j=0;j<array_size;j++)
            {
                tour[j][i]=tour_best[j];
                if (i==j)
                {
                    tour[j][i]=(float)rand()/(float)(RAND_MAX/sum_val);
                }
            }
        }
        tour_error_percent=100*tour_error_value/sum_val;*/

   /** PRINT OUT VALUES **/
   /*
    printf("\nGoal\n");

    int j=0;
    for (j=0;j<array_size;j++)
    {
        printf("%f ",input[j]);
    }
        best_fit_percent=100*float(best_fit)/(sum_val*float(array_size));
            printf("\n\noutput (%i Generations)\n",output_gens);
            for (j=0;j<array_size;j++)
            {
                printf("%f ",output_array[j]);
            }
        printf("\nBest Difference: %2.3f Percent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",output_error_percent);
        printf("\n");
            for (j=0;j<array_size;j++)
            {
                printf("%f ",best_choice[j]);
            }
        printf("\nBest Difference: %2.3f Percent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",best_fit_percent);

        printf("\n\nRoulette (%i Generations)\n",roulette_gens);
            for (j=0;j<array_size;j++)
            {
                printf("%f ",best_roulette_winner[j]);
            }
        printf("\nBest Difference: %2.3f Percent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",roulette_error_percent);
        printf("\nMaximum Error: %2.3f Percent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",roulette_max_variance);

        printf("\n\nTournament (%i Generations)\n",tour_gens);
            for (j=0;j<array_size;j++)
            {
                printf("%2.3f ",tour_best[j]);
            }
        printf("\nBest Difference: %2.3f Percent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",tour_error_percent);*/

/*for (k=0;k<child_no;k++)
{
    for (i=0;i<array_size;i++)
    {
        for (j=0;j<array_size2;j++)
        {
            printf("%f\t",output[i][j][k]);
        }
    printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    }
printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
}
printf("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
for (i=0;i<array_size;i++)
{
    int j;
    for (j=0;j<array_size2;j++)
    {
        printf("%f\t",input[i][j][0]);
    }
    printf("\n\n");
}*/
/** WRITE VALUES INTO OUTPUT FILES **/
char writename[200]="C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\OUTPUT_WRITE.txt";
char writename2[200]="C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\INPUT_WRITE.txt";

FILE *fptr=fopen(writename,"w");

for (k=0;k<child_no;k++)
{
    fprintf(fptr,"\n\nTest Case %i\n",k+1);
    int j;
    for (j=0;j<array_size2;j++)
    {
        int i;
        for (i=-3;i<array_size;i++)
        {
            if (i>=0)
            {
                fprintf(fptr,"%E",output[i][j][k]);
            }
            else
            {
                fprintf(fptr,"%E",constant[i+3][j][k]);
            }
            if (i<array_size-1)
            {
                fprintf(fptr,",");
            }
        }
        fprintf(fptr,"\n");
    }
}
fclose(fptr);

FILE *fptr2=fopen(writename2,"w");
//for (k=0;k<parent_no;k++)
for (k=0;k<parent_no;k++)
{
    fprintf(fptr2,"\n\nTest Case %i\n",k+1);
    int j;
    for (j=0;j<array_size2;j++)
    {
        int i;
        for (i=-3;i<array_size;i++)
        {
            if (i>=0)
            {
                fprintf(fptr2,"%E",input[i][j][k]);
            }
            else
            {
                fprintf(fptr2,"%E",constant[i+3][j][k]);
            }
            if (i<array_size-1)
            {
                fprintf(fptr2,",");
            }
        }
        fprintf(fptr2,"\n");
    }
}
fclose(fptr2);

printf("\n%i\t%i",array_size,array_size2);
printf("\n\nSIMULATION COMPLETE\n~~~~~~~~~~~~~~~~~~~\n");
//int status = system("C:\\Users\\Jack\\Documents\\CalPoly\\NuRad\\AutoIt\\test.exe"); //Call program to continue loop
   return 0 ;
 }
